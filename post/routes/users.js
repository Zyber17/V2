// Generated by CoffeeScript 1.6.2
(function() {
  var collect, db, findUser, marked, moment, string,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  db = require('../db');

  moment = require('moment');

  marked = require('marked');

  string = require('string');

  marked.setOptions({
    gfm: true,
    breaks: true,
    tables: false,
    sanitize: true
  });

  exports.list = function(req, res, next) {
    return db.Users.find({}, {
      password: 0,
      permissions: 0,
      bio: 0,
      email: 0
    }).sort('name').execFind(function(err, resp) {
      return res.render('userList', {
        users: resp
      });
    });
  };

  exports.new_get = function(req, res, next) {
    if (req.session.message) {
      res.render('newUser', req.session.message);
      return req.session.message = null;
    } else {
      return res.render('newUser');
    }
  };

  exports.new_post = function(req, res, next) {
    var err, newUser;

    err = [];
    if (!req.body.name || req.body.name.length <= 3) {
      err.push('Name must be longer than three characters.');
    }
    if (!req.body.username || req.body.username.length < 0) {
      err.push('Username must be longer than zero characters.');
    }
    if (!req.body.password || req.body.password.length < 10) {
      err.push('Password must be ten characters or longer.');
    }
    if (req.body.bio && req.body.bio.length < 20) {
      err.push('A bio must either not exist (be completely empty) or be longer than twenty characters.');
    }
    if (req.body.email && !/\S+@\S+\.\S\S+/.test(req.body.email)) {
      err.push('Emails must be six characters or longer, contain both peroid and an at sign, and contain no whitespace. Leave the feild blank to have the email be automagically guessed.');
    }
    if (err.length > 0) {
      req.session.message = req.body;
      req.session.message.dispBio = req.body.bio;
      req.body.knowsHTML = string(req.body.knowsHTML).toBool();
      req.body.canPublishStories = string(req.body.canPublishStories).toBool();
      req.body.canDeletePhotos = string(req.body.canDeletePhotos).toBool();
      req.body.canManageIssues = string(req.body.canManageIssues).toBool();
      req.body.canManageUsers = string(req.body.canManageUsers).toBool();
      req.body.canManageSections = string(req.body.canManageSections).toBool();
      req.body.canEditPlannerFormats = string(req.body.canEditPlannerFormats).toBool();
      req.body.canAcceptPlanners = string(req.body.canAcceptPlanners).toBool();
      req.body.canEditOthersComments = string(req.body.canEditOthersComments).toBool();
      req.body.canComment = string(req.body.canComment).toBool();
      req.body.canChat = string(req.body.canChat).toBool();
      req.body.isWebmaster = string(req.body.isWebmaster).toBool();
      req.body.isRetired = string(req.body.isRetired).toBool();
      req.body.isDisabled = string(req.body.isDisabled).toBool();
      req.session._err = err;
      return res.redirect('/staff/users/new');
    } else {
      newUser = new db.Users({
        username: req.body.username,
        name: req.body.name,
        bio: {
          rendered: req.body.bio ? marked(req.body.bio) : null,
          notRendered: req.body.bio || null
        },
        email: req.body.email || ("" + (req.body.name.toLowerCase().replace(' ', '.')) + "@pineviewtorch.com"),
        isStaff: req.body.isStaff,
        password: req.body.password,
        permissions: {
          knowsHTML: req.body.knowsHTML || false,
          canPublishStories: req.body.canPublishStories || false,
          canDeletePhotos: req.body.canDeletePhotos || false,
          canManageIssues: req.body.canManageIssues || false,
          canManageUsers: req.body.canManageUsers || false,
          canManageSections: req.body.canManageSections || false,
          canEditPlannerFormats: req.body.canEditPlannerFormats || false,
          canAcceptPlanners: req.body.canAcceptPlanners || false,
          canEditOthersComments: req.body.canEditOthersComments || false,
          canComment: req.body.canComment || false,
          canChat: req.body.canChat || false,
          accountStatus: {
            isWebmaster: req.body.isWebmaster || false,
            isRetired: req.body.isRetired || false,
            isDisabled: req.body.isDisabled || false
          }
        }
      });
      return newUser.save(function(err, resp) {
        if (err === null) {
          res.redirect("/staff/users/" + resp.slug + "/");
        } else {
          console.log("Error (users): " + err);
        }
        return res.end(JSON.stringify(err));
      });
    }
  };

  exports.edit_get = function(req, res, next) {
    if (req.session.message) {
      res.render('newUser', req.session.message);
      return req.session.message = null;
    } else {
      return findUser(req.params.slug, function(err, resp) {
        if (!err) {
          if (resp) {
            resp.dispBio = resp.bio.notRendered;
            return collect(resp._doc, resp._doc.permissions, resp._doc.permissions.accountStatus, function(ret) {
              delete ret.permissions;
              delete ret.accountStatus;
              delete ret.bio;
              ret.dispBio = resp.bio.notRendered;
              return res.render('newUser', ret);
            });
          } else {
            return res.render('errors/404', {
              err: "User not found"
            });
          }
        } else {
          console.log("Error (users): " + err);
          return res.end(JSON.stringify(err));
        }
      });
    }
  };

  exports.edit_post = function(req, res, next) {
    var err;

    err = [];
    if (!req.body.name || req.body.name.length <= 3) {
      err.push('Name must be longer than three characters.');
    }
    if (!req.body.username || req.body.username.length < 0) {
      err.push('Username must be longer than zero characters.');
    }
    if (req.body.password && req.body.password.length < 10) {
      err.push('Password must be ten characters or longer.');
    }
    if (req.body.bio && req.body.bio.length < 20) {
      err.push('A bio must either not exist (be completely empty) or be longer than twenty characters.');
    }
    if (req.body.email && !/\S+@\S+\.\S\S+/.test(req.body.email)) {
      err.push('Emails must be six characters or longer, contain both peroid and an at sign, and contain no whitespace. Leave the feild blank to have the email be automagically guessed.');
    }
    if (err.length > 0) {
      req.session.message = req.body;
      req.session.message._err = err;
      req.body.knowsHTML = string(req.body.knowsHTML).toBool();
      req.body.canPublishStories = string(req.body.canPublishStories).toBool();
      req.body.canDeletePhotos = string(req.body.canDeletePhotos).toBool();
      req.body.canManageIssues = string(req.body.canManageIssues).toBool();
      req.body.canManageUsers = string(req.body.canManageUsers).toBool();
      req.body.canManageSections = string(req.body.canManageSections).toBool();
      req.body.canEditPlannerFormats = string(req.body.canEditPlannerFormats).toBool();
      req.body.canAcceptPlanners = string(req.body.canAcceptPlanners).toBool();
      req.body.canEditOthersComments = string(req.body.canEditOthersComments).toBool();
      req.body.canComment = string(req.body.canComment).toBool();
      req.body.canChat = string(req.body.canChat).toBool();
      req.body.isWebmaster = string(req.body.isWebmaster).toBool();
      req.body.isRetired = string(req.body.isRetired).toBool();
      req.body.isDisabled = string(req.body.isDisabled).toBool();
      return res.redirect("/staff/users/" + req.params.slug + "/");
    } else {
      return findUser(req.params.slug, function(err, resp) {
        if (!err) {
          if (resp) {
            resp.username = req.body.username;
            resp.name = req.body.name;
            resp.bio = {
              rendered: req.body.bio ? marked(req.body.bio) : null,
              notRendered: req.body.bio || null
            };
            resp.email = req.body.email || ("" + (req.body.name.toLowerCase().replace(' ', '.')) + "@pineviewtorch.com");
            resp.isStaff = req.body.isStaff;
            resp.permissions = {
              knowsHTML: string(req.body.knowsHTML).toBool(),
              canPublishStories: req.body.canPublishStories || false,
              canDeletePhotos: req.body.canDeletePhotos || false,
              canManageIssues: req.body.canManageIssues || false,
              canManageUsers: req.body.canManageUsers || false,
              canManageSections: req.body.canManageSections || false,
              canEditPlannerFormats: req.body.canEditPlannerFormats || false,
              canAcceptPlanners: req.body.canAcceptPlanners || false,
              canEditOthersComments: req.body.canEditOthersComments || false,
              canComment: req.body.canComment || false,
              canChat: req.body.canChat || false,
              accountStatus: {
                isWebmaster: req.body.isWebmaster || false,
                isRetired: req.body.isRetired || false,
                isDisabled: req.body.isDisabled || false
              }
            };
            if (req.body.password) {
              resp.password = req.body.password;
            }
            return resp.save(function(err, resp) {
              if (err) {
                console.log("Error (users): " + err);
                return res.end(JSON.stringify(err));
              } else {
                return res.redirect("/staff/users/" + resp.slug + "/");
              }
            });
          } else {
            return res.render('errors/404', {
              err: "User not found"
            });
          }
        } else {
          console.log("Error (users): " + err);
          return res.end(JSON.stringify(err));
        }
      });
    }
  };

  exports.remove = function(req, res, next) {
    if (req.body["delete"] === "true") {
      return db.Users.findOneAndRemove({
        slug: req.params.slug
      }, function(err, resp) {
        if (!err) {
          return res.redirect('/');
        } else {
          console.log("Error (users): " + err);
          return res.end(JSON.stringify(err));
        }
      });
    } else {
      return res.redirect("/staff/users/" + resp.slug + "/");
    }
  };

  exports.change_get = function(req, res, next) {
    if (req.session.message) {
      res.render('newUser', req.session.message);
      return req.session.message = null;
    } else {
      db.Users.findById(req.session.user._id, {
        username: 1,
        name: 1
      }, function(err, resp) {});
      if (!err) {
        if (resp) {
          return res.render('userSettings', resp);
        } else {
          return res.render('/logout');
        }
      } else {
        console.log("Error (users): " + err);
        return res.end(JSON.stringify(err));
      }
    }
  };

  exports.change_post = function(req, res, next) {
    return true;
  };

  findUser = function(slug, callback) {
    return db.Users.findOne({
      slug: slug
    }, {
      password: 0
    }, function(err, resp) {
      return callback(err, resp);
    });
  };

  collect = function() {
    var args, callback, i, k, len, ret, v, _i, _j, _ref;

    args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
    ret = {};
    len = args.length;
    for (i = _j = 0; 0 <= len ? _j < len : _j > len; i = 0 <= len ? ++_j : --_j) {
      _ref = args[i];
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        v = _ref[k];
        ret[k] = v;
      }
    }
    return callback(ret);
  };

}).call(this);
