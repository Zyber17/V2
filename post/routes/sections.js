// Generated by CoffeeScript 1.6.2
(function() {
  var db, findSection, moment;

  db = require('../db');

  moment = require('moment');

  exports.list = function(req, res, next) {
    return db.Sections.find({}, {
      title: 1,
      slug: 1
    }).sort('-createdDate').execFind(function(err, resp) {
      var i, section, sections, _i, _len;

      if (!err) {
        sections = [];
        for (i = _i = 0, _len = resp.length; _i < _len; i = ++_i) {
          section = resp[i];
          sections[i] = {
            title: section.title,
            slug: "/sections/" + section.slug + "/"
          };
        }
        return res.render('sectionsList', {
          sections: sections
        });
      } else {
        console.log(err);
        return res.end(JSON.stringify(err));
      }
    });
  };

  exports.new_get = function(req, res, next) {
    var send;

    if (req.session.message) {
      send = {
        err: req.session.message.err,
        title: req.session.message.content.title,
        editing: false
      };
      return res.render('newSection', send);
    } else {
      return res.render('newSection', {
        editing: false
      });
    }
  };

  exports.new_post = function(req, res, next) {
    var err, newSection;

    err = [];
    if (!req.body.title || req.body.title.length < 3) {
      err.push("Name must be three characters or more.");
    }
    if (err.length > 0) {
      req.session.message({
        err: err,
        content: req.body
      });
      return res.redirect('/sections/new');
    } else {
      newSection = new db.Sections({
        title: req.body.title
      });
      return newSection.save(function(err, resp) {
        if (!err) {
          return res.redirect('/sections/');
        } else {
          return res.end(JSON.stringify(err));
        }
      });
    }
  };

  exports.edit_get = function(req, res, next) {
    var send;

    if (req.session.message) {
      send = {
        err: req.session.message.err,
        title: req.session.message.content.title,
        editing: true
      };
      return res.render('newSection', send);
    } else {
      return findSection(req.params.slug, function(err, resp) {
        if (!err) {
          if (resp) {
            send = {
              title: resp.title,
              editing: true
            };
            return res.render('newSection', send);
          } else {
            return res.render('errors/404', {
              err: "Section not found"
            });
          }
        } else {
          console.log(err);
          return res.end(JSON.stringify(err));
        }
      });
    }
  };

  exports.edit_post = function(req, res, next) {
    var err;

    err = [];
    if (!req.body.title || req.body.title.length < 3) {
      err.push("Name must be three characters or more.");
    }
    if (err.length > 0) {
      req.session.message({
        err: err,
        content: req.body
      });
      return res.redirect("/sections/" + req.params.slug);
    } else {
      return findSection(req.params.slug, function(err, resp) {
        if (!err) {
          if (resp) {
            resp.title = req.body.title;
            return resp.save(function(err, resp) {
              if (err) {
                return res.end(JSON.stringify(err));
              } else {
                return res.redirect("/sections/");
              }
            });
          } else {
            return res.render('errors/404', {
              err: "Article not found"
            });
          }
        } else {
          console.log(err);
          return res.end(JSON.stringify(err));
        }
      });
    }
  };

  findSection = function(slug, callback) {
    return db.Sections.findOne({
      slug: slug
    }).select({
      title: 1,
      slug: 1
    }).exec(function(err, resp) {
      return callback(err, resp);
    });
  };

}).call(this);
