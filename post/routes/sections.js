// Generated by CoffeeScript 1.6.2
(function() {
  var db, findSection, htmlToText, moment, string;

  db = require('../db');

  moment = require('moment');

  htmlToText = require('html-to-text');

  string = require('string');

  exports.view = function(req, res, next) {
    return db.Articles.find({
      publishDate: {
        $lte: moment().toDate()
      },
      status: 4,
      'section.slug': req.params.slug
    }, {
      publishDate: 1,
      body: 1,
      title: 1,
      author: 1,
      slug: 1,
      photos: 1,
      section: 1
    }).sort({
      'publishDate': -1,
      'lastEditDate': -1
    }).limit(3).execFind(function(err, recent) {
      var article, i, recentAr, _i, _len;

      if (!err) {
        if (recent.length) {
          recentAr = [];
          for (i = _i = 0, _len = recent.length; _i < _len; i = ++_i) {
            article = recent[i];
            recentAr[i] = {
              body: string(htmlToText.fromString(article.body[0].body)).truncate(250).s,
              author: article.author,
              title: string(article.title).truncate(75).s,
              date: {
                human: moment(article.publishDate).format("MMM D, YYYY"),
                robot: moment(article.publishDate).toISOString().split('T')[0]
              },
              slug: "/articles/" + article.slug + "/",
              section: JSON.stringify(article.section),
              photo: article.photos[0] ? "http://s3.amazonaws.com/V2_test/" + article._id + "/" + article.photos[0].name : void 0,
              rotator: article.photos[0] ? "http://s3.amazonaws.com/V2_test/" + article._id + "/" + article.photos[article.photos.length - 1].name : void 0,
              isPublished: article.status === 4 && article.publishDate ? (moment(article.publishDate) < moment() ? 2 : 1) : 0,
              isRotatable: article.photos[0] ? true : false
            };
          }
          return res.render('index', {
            recentAr: recentAr,
            section: recent[0].section.title
          });
        } else {
          return res.render('errors/404', {
            _err: ["Article not found"]
          });
        }
      } else {
        console.log("Error (articles): " + err);
        return res.end(JSON.stringify(err));
      }
    });
  };

  exports.list = function(req, res, next) {
    return db.Sections.find({}, {
      title: 1,
      slug: 1
    }).sort('-createdDate').execFind(function(err, resp) {
      var i, section, sections, _i, _len;

      if (!err) {
        sections = [];
        for (i = _i = 0, _len = resp.length; _i < _len; i = ++_i) {
          section = resp[i];
          sections[i] = {
            title: section.title,
            slug: "/staff/sections/" + section.slug + "/"
          };
        }
        return res.render('sectionsList', {
          sections: sections
        });
      } else {
        console.log("Error (sections): " + err);
        return res.end(JSON.stringify(err));
      }
    });
  };

  exports.new_get = function(req, res, next) {
    if (req.session.message) {
      req.session.message.editing = false;
      res.render('newSection', req.session.messages);
      return req.session.message = null;
    } else {
      return res.render('newSection', {
        editing: false
      });
    }
  };

  exports.new_post = function(req, res, next) {
    var err, newSection;

    err = [];
    if (!req.body.title || req.body.title.length < 3) {
      err.push("Name must be three characters or more.");
    }
    if (err.length > 0) {
      req.session.message = req.body;
      req.session.message._err = err;
      return res.redirect('/staff/sections/new');
    } else {
      newSection = new db.Sections({
        title: req.body.title
      });
      return newSection.save(function(err, resp) {
        if (!err) {
          return res.redirect('/staff/sections/');
        } else {
          console.log("Error (sections): " + err);
          return res.end(JSON.stringify(err));
        }
      });
    }
  };

  exports.edit_get = function(req, res, next) {
    if (req.session.message) {
      req.session.message.editing = true;
      res.render('newSection', req.session.messages);
      return req.session.message = null;
    } else {
      return findSection(req.params.slug, function(err, resp) {
        var send;

        if (!err) {
          if (resp) {
            send = {
              title: resp.title,
              editing: true
            };
            return res.render('newSection', send);
          } else {
            return res.render('errors/404', {
              _err: "Section not found"
            });
          }
        } else {
          console.log("Error (sections): " + err);
          return res.end(JSON.stringify(err));
        }
      });
    }
  };

  exports.edit_post = function(req, res, next) {
    var err;

    err = [];
    if (!req.body.title || req.body.title.length < 3) {
      err.push("Name must be three characters or more.");
    }
    if (err.length > 0) {
      req.session.message = req.body;
      req.session.message._err = err;
      return res.redirect("/staff/sections/" + req.params.slug);
    } else {
      return findSection(req.params.slug, function(err, resp) {
        if (!err) {
          if (resp) {
            resp.title = req.body.title;
            return resp.save(function(err, resp) {
              if (err) {
                console.log("Error (sections): " + err);
                return res.end(JSON.stringify(err));
              } else {
                return res.redirect("/staff/sections/");
              }
            });
          } else {
            return res.render('errors/404', {
              _err: "Article not found"
            });
          }
        } else {
          console.log("Error (sections): " + err);
          return res.end(JSON.stringify(err));
        }
      });
    }
  };

  exports.remove = function(req, res, next) {
    return db.Sections.findOneAndRemove({
      slug: req.params.slug
    }, function(err, resp) {
      if (!err) {
        return res.redirect('/staff/sections/');
      } else {
        console.log("Error (sections): " + err);
        return res.end(JSON.stringify(err));
      }
    });
  };

  findSection = function(slug, callback) {
    return db.Sections.findOne({
      slug: slug
    }).select({
      title: 1,
      slug: 1
    }).exec(function(err, resp) {
      return callback(err, resp);
    });
  };

}).call(this);
