// Generated by CoffeeScript 1.6.3
(function() {
  var db, es, moment, string, up;

  db = require('../db');

  es = require('../es');

  string = require('string');

  moment = require('moment');

  up = function() {
    return db.Articles.find({
      publishDate: {
        $lte: moment().toDate()
      },
      status: 4
    }).select({
      bodyPlain: 1,
      title: 1,
      slug: 1,
      photos: 1,
      author: 1,
      publishDate: 1
    }).exec(function(err, articles) {
      var article, i, _i, _len, _results;
      if (!err) {
        if (articles.length) {
          _results = [];
          for (i = _i = 0, _len = articles.length; _i < _len; i = ++_i) {
            article = articles[i];
            if (article != null) {
              if ((article.bodyPlain != null) && (article.title != null) && (article.slug != null)) {
                _results.push(es.index({
                  index: 'torch',
                  type: 'article',
                  id: article._id.toString(),
                  body: {
                    title: article.title,
                    author: article.author,
                    date: article.publishDate,
                    slug: article.slug,
                    photo: article.photos[0] ? (article.photos.length > 1 ? article.photos[article.photos.length - 2].name : article.photos[0].name) : void 0,
                    body: article.bodyPlain,
                    truncated: string(article.bodyPlain).truncate(400).s
                  }
                }, function(err, esresp) {
                  if (!err) {
                    return console.log("Okay: " + i);
                  } else {
                    console.log("Error (articles): " + err);
                  }
                }));
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      } else {
        console.log("Error: " + err);
      }
    });
  };

  up();

}).call(this);
